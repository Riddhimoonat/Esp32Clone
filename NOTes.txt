üìù Prompt for Coding the ESP32 Hardware System with NEO-6M, SIM800L, and LED
"I am building a GPS tracking system using the following hardware components:

ESP32 Development Board: Used as the main microcontroller to process data and control the system.
NEO-6M GPS Module: To obtain real-time GPS coordinates (latitude, longitude, altitude, speed, and time).
SIM800L GSM Module: To send GPS coordinates via SMS over a 2G network using a SIM card with an active data plan.
LED: To indicate system status (e.g., blinking when GPS data is received, solid when SMS is sent successfully).
Jumper Wires: For connecting the components.
Broadband: I have an internet connection available, which I assume can be provided via the SIM800L's GPRS capability over a 2G network (ensure the SIM card supports 2G, as SIM800L only works with 2G networks).
Power Supply: A stable power source providing 3.3V for the ESP32 and NEO-6M, and 3.7V‚Äì4.2V for the SIM800L (e.g., a LiPo battery or a regulated power supply capable of delivering at least 2A for the SIM800L to handle current spikes).
Project Goal
The goal is to create a system where the ESP32:

Reads GPS data (latitude, longitude, and time) from the NEO-6M GPS module.
Sends the GPS coordinates via SMS to a predefined phone number using the SIM800L GSM module.
Uses an LED to indicate the system status:
Blinking every second when the system is waiting for a GPS fix.
Solid ON when GPS data is successfully received and an SMS is sent.
OFF if there's an error (e.g., no GPS fix or SMS failure).
Repeats the process every 60 seconds if successful, or retries after 10 seconds if there's a failure.
Hardware Connections
ESP32:
Powered via USB or a 3.3V supply.
NEO-6M GPS Module:
VCC to ESP32 3.3V pin.
GND to ESP32 GND pin.
TX to ESP32 GPIO 16 (RX pin for Serial2).
RX to ESP32 GPIO 17 (TX pin for Serial2).
SIM800L GSM Module:
VCC to a 3.7V‚Äì4.2V power supply (e.g., a LiPo battery or a 4V supply with at least 2A capacity, using a 100¬µF tantalum capacitor and a 470¬µF electrolytic capacitor near the VCC pin to handle current spikes).
GND to ESP32 GND pin (common ground with the power supply).
TX to ESP32 GPIO 26 (RX pin for Serial1).
RX to ESP32 GPIO 27 (TX pin for Serial1).
RST to ESP32 GPIO 23 (to reset the module if needed).
LED:
Anode to ESP32 GPIO 19 via a 1kŒ© current-limiting resistor.
Cathode to ESP32 GND pin.
Antennas:
Ensure the NEO-6M has a GPS antenna attached and is placed with a clear view of the sky (e.g., near a window or outdoors).
Ensure the SIM800L has a GSM antenna attached for better network connectivity.
Software Requirements
Use the Arduino IDE to program the ESP32.
Install the following libraries:
TinyGPSPlus: To parse NMEA sentences from the NEO-6M GPS module and extract latitude, longitude, and time.
SoftwareSerial (or use ESP32's hardware serial ports, Serial1 and Serial2, as defined above).
The code should:
Initialize serial communication with the NEO-6M (baud rate 9600) and SIM800L (baud rate 9600).
Read GPS data from the NEO-6M and wait for a valid GPS fix (indicated by the NEO-6M's LED blinking and valid latitude/longitude data).
Use AT commands to configure the SIM800L, connect to the 2G network, and send an SMS with the GPS coordinates to a predefined phone number (e.g., "+91XXXXXXXXXX").
Control the LED to indicate system status as described above.
Implement a loop to repeat the process every 60 seconds if successful, or retry after 10 seconds if there's a failure (e.g., no GPS fix or SMS failure).
Include error handling for cases like:
No GPS fix after a timeout (e.g., 2 minutes).
SIM800L not connecting to the network (check the SIM800L LED blinking pattern: every 3 seconds means connected to the network).
SMS sending failure.
Print debug messages to the Serial Monitor (baud rate 115200) for troubleshooting (e.g., GPS data, SIM800L responses, and system status).
Additional Notes
Ensure the SIM card in the SIM800L is active, supports 2G, has no PIN lock, and has sufficient balance for sending SMS.
The SIM800L requires a stable power supply to avoid resets (use capacitors as mentioned to handle current spikes).
The NEO-6M may take a few minutes to get a GPS fix, especially on a cold start or indoors. Test the system outdoors or near a window for better satellite reception.
If the SIM800L fails to connect to the network, check the LED blinking pattern (every second means searching for a network, every 3 seconds means connected) and ensure the antenna is properly attached and positioned for good signal strength.
Deliverables
Write a complete Arduino sketch that meets the above requirements. Include comments in the code to explain each section (e.g., hardware setup, GPS parsing, SIM800L AT commands, LED control, and error handling). Provide a brief explanation of the code's functionality and any troubleshooting tips for common issues (e.g., no GPS fix, SIM800L network issues, or power supply problems)."

This prompt provides a clear and detailed description of the project, hardware connections, software requirements, and expected functionality. It ensures the code will integrate the ESP32, NEO-6M, SIM800L, and LED effectively while addressing potential challenges like power supply stability, GPS fix delays, and network connectivity issues. Let me know if you'd like to proceed with writing the actual code or if you need adjustments to the prompt!